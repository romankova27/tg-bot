import os
import telebot
from telebot import types
import fitz  # PyMuPDF –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
from sentence_transformers import SentenceTransformer, util  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from concurrent.futures import ThreadPoolExecutor
import fitz
from functools import lru_cache
from torch import cosine_similarity
import openai

os.environ["TOKENIZERS_PARALLELISM"] = "false"
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot('YOUR_BOT')


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ PDF)
user_messages = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
user_states = {} # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_headings = {}  # –•—Ä–∞–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
headings_dict = {}
current_heading = None
text_accumulator = []
valid_headings = [
    "materials and methods", "methods", "experimental", "methodology",
    "results and discussion", "results", "discussion", "findings"
]

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
bot.set_my_commands([
    telebot.types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    telebot.types.BotCommand("help", "–ü–æ–º–æ—â—å"),
    telebot.types.BotCommand("analyze", "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é"),
    telebot.types.BotCommand("article_headings", "–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç—å–∏")
])


# --- –ö–ª–∞—Å—Å –∞–Ω–∞–ª–∏–∑–∞ PDF-—Ñ–∞–π–ª–æ–≤ ---
class PDFHeadingExtractor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ PDF-—Ñ–∞–π–ª–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyMuPDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –∏ Sentence Transformers –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞.
    """

    def __init__(self, model_name='paraphrase-MiniLM-L6-v2'):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Sentence Transformers
        self.model = SentenceTransformer(model_name)
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.keywords = [
            "Results", "Discussion", "Conclusion", "Acknowledgments", "References",
            "Summary", "Materials and Methods", "Appendix", "Introduction", "Methods",
            "Abstract", "Findings", "Results and Discussion", "Conclusions",
            "Bibliography", "Concluding Remarks", "Future Work", "Further Research", 
            "Limitations", "Implications", "Final Remarks", "Closing Remarks", "General Discussion",
            "General Conclusions", "Supplementary Material", "Supporting Information", 
            "Background"
        ]

    def extract_with_similarity_analysis(self, page, keywords):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        """
        headings = []
        text = page.get_text("text")
        lines = text.split("\n")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –æ–¥–∏–Ω —Ä–∞–∑
        keyword_embeddings = {k: self.model.encode(k, convert_to_tensor=True) for k in keywords}

        for line in lines:
            line_clean = line.strip().lower()
            line_embedding = self.model.encode(line_clean, convert_to_tensor=True)

            for _, keyword_embedding in keyword_embeddings.items():
                similarity = cosine_similarity(line_embedding.unsqueeze(0), keyword_embedding.unsqueeze(0))
                if similarity.item() > 0.8:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
                    headings.append(line.strip())
                    break
        return headings
    
    def process_page(self, page, keywords):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
        """
        headings_similarity = self.extract_with_similarity_analysis(page, keywords)
        print('s', headings_similarity)
        return headings_similarity 
    
    
    def split_text(text, max_tokens=1500):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤."""
        words = text.split()
        chunks = []
        current_chunk = []
        current_length = 0
        
        for word in words:
            current_length += len(word) // 4
            current_chunk.append(word)
            if current_length >= max_tokens:
                chunks.append(" ".join(current_chunk))
                current_chunk = []
                current_length = 0
        if current_chunk:
            chunks.append(" ".join(current_chunk))
        return chunks


    def analyze_text_with_openai(self, headings_text):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∫—Ç–µ—Ä–∏–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∫—Ä–∏–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–æ–≤."""
        results = []

        for heading, text in headings_text:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏
            prompt = f""" –ó–∞–≥–æ–ª–æ–≤–æ–∫: {heading}\n–¢–µ–∫—Å—Ç: {text}\n –ó–∞–≥–æ–ª–æ–≤–æ–∫: {heading} \n
            –¢—ã –Ω–∞—É—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –æ —Ç–µ—Ö –±–∞–∫—Ç–µ—Ä–∏—è—Ö –∏ –∫—Ä–∏–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Å–ª–µ–¥—É—é—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è.  
            –¢–µ–±–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–∏. –ò–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n  
            1. –ë–∞–∫—Ç–µ—Ä–∏—è:  –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∫—Ç–µ—Ä–∏–∏, –∫–æ—Ç–æ—Ä–∞—è **–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ** (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Lactobacillus plantarum TISTR 2075").  
            –ï—Å–ª–∏ –±–∞–∫—Ç–µ—Ä–∏—è —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å —á—É–∂–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –µ—ë.  \n
            2. –ö—Ä–∏–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: 
            - –ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –∫—Ä–∏–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–ª–∏—Å—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ, –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞.
            –£–∫–∞–∑—ã–≤–∞–π **—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ** –∫—Ä–∏–æ–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.  
            –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–∏—à–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ". 
            –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¢—Ä–µ–≥–∞–ª–æ–∑–∞ (trehalose)").\n 
            –ò–≥–Ω–æ—Ä–∏—Ä—É–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–∞.  
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–∏–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
                client = openai.OpenAI(api_key="YOUR_API")  # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI

                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}]
)
                result = response.choices[0].message.content
                results.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {heading}\n{result}\n")
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                results.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ '{heading}': {str(e)}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        return "\n".join(results)


    def extract_text_from_pdf(pdf_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF."""
        doc = fitz.open(pdf_path)
        text = ""
        for page in doc:
            text += page.get_text()
        return text

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---

@bot.message_handler(commands=['start'])
def start(message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    mess = f'''–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üëã 
    
–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç–∞—Ç—å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—ë –∏ –∏–∑–≤–ª–µ—á—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏. 

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!‚ú®'''
    bot.send_message(message.chat.id, mess, parse_mode='html')


@bot.message_handler(commands=['help'])
def help(message):
    """
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.
    """
    mess2 = f'''–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ <a>@romankova_a</a>. 

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å! üòä'''
    bot.send_message(message.chat.id, mess2, parse_mode='html')


@bot.message_handler(commands=['article_headings'])
def article_headings(message):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF-—Ñ–∞–π–ª–∞.
    """
    user_states[message.chat.id] = 'waiting_for_pdf'
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤!")

@bot.message_handler(commands=['analyze'])
def analyze(message):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF-—Ñ–∞–π–ª–∞.
    """
    user_states[message.chat.id] = 'waiting_for_pdf_analyze'
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    
    
    
# --- –ü—Ä–æ–≥—Ä–µ—Å ---
def update_progress(progress_message, chat_id, current_page, total_pages):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    progress = int((current_page / total_pages) * 100)
    bot.edit_message_text(f"–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞... {progress}%", chat_id, progress_message.message_id)

def process_pdf_pages(doc, keywords, progress_message, chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF-—Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    total_pages = len(doc)  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    current_page = 0  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    
    extractor = PDFHeadingExtractor()
    all_headings = []
    for page in doc:
        headings = extractor.process_page(page, keywords)
        all_headings.extend(headings)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        current_page += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        update_progress(progress_message, chat_id, current_page, total_pages)

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    unique_headings = sorted(set(all_headings), key=all_headings.index)
    return unique_headings



@bot.message_handler(content_types=['document'])
def handle_or_analyze(message):
    state = user_states.get(message.chat.id)
    if state == 'waiting_for_pdf':
        # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        handle_document(message)
    elif state == 'waiting_for_pdf_analyze':
        # –í—ã–∑–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—å–∏
        handle_bacteria_analysis(message)
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /article_headings –∏–ª–∏ /analyze.")


def handle_document(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º PDF-—Ñ–∞–π–ª.
    """
    extractor = PDFHeadingExtractor()
    if user_states.get(message.chat.id) != 'waiting_for_pdf' and user_states.get(message.chat.id) != 'waiting_for_pdf_analyze':
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /article_headings.")
        return

    file = message.document
    if file.mime_type == 'application/pdf':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 0%
        progress_message = bot.send_message(message.chat.id, "–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞... 0%")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –Ω–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
        sticker_id = "CAACAgIAAxkBAAPZZzn0f6i9LFsJ2xydCBmeFYz0N2EAAi1hAAIR9NBJ0dNtPvP7qpM2BA"
        sent_sticker = bot.send_sticker(message.chat.id, sticker_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        try:
            file_path = f"temp_{file.file_id}.pdf"
            file_info = bot.get_file(file.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF
            doc = fitz.open(file_path)
            keywords_lower = [k.lower() for k in extractor.keywords]
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            headings = process_pdf_pages(doc, keywords_lower, progress_message, message.chat.id)
                    
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            os.remove(file_path)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if headings:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_headings[message.chat.id] = headings

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                markup = types.InlineKeyboardMarkup()
                for idx, heading in enumerate(headings):
                    button = types.InlineKeyboardButton(text=heading, callback_data=f"heading_{idx}")
                    markup.add(button)
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å—è —Å—Ç–∞—Ç—å—è" –∏ "–û—Ç–º–µ–Ω–∞"
                all_article_button = types.InlineKeyboardButton(text="–í—Å—è —Å—Ç–∞—Ç—å—è", callback_data="all_article")
                cancel_button = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
                markup.add(all_article_button, cancel_button)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
                sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)
                user_messages[message.chat.id] = {"menu_message_id": sent_message.message_id}

            else:
                bot.send_message(message.chat.id, "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            
        finally:
                try:
                    bot.delete_message(message.chat.id, sent_sticker.message_id)
                    bot.delete_message(message.chat.id, progress_message.message_id)
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_states[message.chat.id] = None
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä: {e}")
            
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if chat_id in user_messages and "result_message" in user_messages[chat_id]:
        result_message_id = user_messages[chat_id]["result_message"]
        bot.delete_message(chat_id, result_message_id)
        del user_messages[chat_id]["result_message"]  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(chat_id, message_id)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_states[chat_id] = None
    if chat_id in user_messages:
        bot.delete_message(chat_id, user_messages[chat_id].get("menu_message_id"))
        del user_messages[chat_id]
    
@bot.callback_query_handler(func=lambda call: call.data == 'all_article')
def handle_all_article(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–í—Å—è —Å—Ç–∞—Ç—å—è' –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    chat_id = call.message.chat.id
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    menu_message_id = user_messages.get(chat_id, {}).get("menu_message_id")
    if menu_message_id:
        try:
            bot.delete_message(chat_id, menu_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")
            
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    back_markup = types.InlineKeyboardMarkup()
    back_button = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
    back_markup.add(back_button)
    

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏
    sent_message = bot.send_message(chat_id, "–í—Å—è —Å—Ç–∞—Ç—å—è:", reply_markup=back_markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
    user_messages[chat_id]["article_message_id"] = sent_message.message_id
    

@bot.callback_query_handler(func=lambda call: call.data.startswith("heading_"))
def handle_heading_selection(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    chat_id = call.message.chat.id
    heading_index = int(call.data.split("_")[1])
    heading = user_headings.get(chat_id, [])[heading_index]

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    menu_message_id = user_messages.get(chat_id, {}).get("menu_message_id")
    if menu_message_id:
        try:
            bot.delete_message(chat_id, menu_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")

    if heading:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
        back_markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_menu")
        back_markup.add(back_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: {heading}", reply_markup=back_markup)
        user_messages[chat_id]["heading_message_id"] = sent_message.message_id


@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def handle_back_to_menu(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥".
    """
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    heading_message_id = user_messages.get(chat_id, {}).get("heading_message_id")
    try:
        if heading_message_id is not None:
            bot.delete_message(chat_id, heading_message_id)
    except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ 1 —Å ID {heading_message_id}: {e}")

    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ 2 —Å ID {call.message.message_id}: {e}")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    headings = user_headings.get(chat_id, [])
    if headings:
        markup = types.InlineKeyboardMarkup()
        for idx, heading in enumerate(headings):
            button = types.InlineKeyboardButton(text=heading, callback_data=f"heading_{idx}")
            markup.add(button)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—Å—è —Å—Ç–∞—Ç—å—è" –∏ "–û—Ç–º–µ–Ω–∞"
        all_article_button = types.InlineKeyboardButton(text="–í—Å—è —Å—Ç–∞—Ç—å—è", callback_data="all_article")
        cancel_button = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        markup.add(all_article_button, cancel_button)

        sent_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)
        user_messages[chat_id]["menu_message_id"] = sent_message.message_id




def handle_bacteria_analysis(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç,
    –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞.
    """
    extractor = PDFHeadingExtractor()
    keep_text = False  # –§–ª–∞–≥: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏ —Ç–µ–∫—Å—Ç (True - –¥–∞, False - –Ω–µ—Ç)
    file = message.document


    if file.mime_type != 'application/pdf':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    progress_message = bot.send_message(message.chat.id, "–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞... 0%")
    sticker_id = "CAACAgIAAxkBAAPZZzn0f6i9LFsJ2xydCBmeFYz0N2EAAi1hAAIR9NBJ0dNtPvP7qpM2BA"
    sent_sticker = bot.send_sticker(message.chat.id, sticker_id)

    try:
        file_path = f"temp_{file.file_id}.pdf"
        file_info = bot.get_file(file.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        doc = fitz.open(file_path)
        keywords_lower = [k.lower() for k in extractor.keywords]

        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        headings = process_pdf_pages(doc, keywords_lower, progress_message, message.chat.id)



        for page in doc:
            text = page.get_text("text")
            lines = text.split("\n")

            for line in lines:
                line_clean = line.strip()
                if line_clean in headings:
                    if line_clean.lower() in valid_headings:
                        if text_accumulator:
                            headings_dict[current_heading] = " ".join(text_accumulator)
                        current_heading = line_clean
                        text_accumulator = []
                        keep_text = True
                    else:
                        current_heading = None
                        text_accumulator = []
                        keep_text = False  

                elif keep_text:
                    text_accumulator.append(line_clean)


                    if current_heading and text_accumulator:
                        headings_dict[current_heading] = " ".join(text_accumulator)

                    
        os.remove(file_path)
        bot.delete_message(message.chat.id, progress_message.message_id)
        bot.delete_message(message.chat.id, sent_sticker.message_id)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        markup = InlineKeyboardMarkup(row_width=1)
        for heading in headings_dict.keys():
            markup.add(InlineKeyboardButton(heading, callback_data=f"analyze_{heading}"))
        markup.add(InlineKeyboardButton("–í—Å—è —Å—Ç–∞—Ç—å—è", callback_data="analyze_all"))
        markup.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {str(e)}")
        
        

        # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("analyze_"))
def process_selected_heading(call):
    extractor = PDFHeadingExtractor()
    selected_heading = call.data.replace("analyze_", "")

    if selected_heading == "all":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headings_text = list(headings_dict.items())
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        headings_text = [(selected_heading, headings_dict.get(selected_heading, ""))]

    responses = extractor.analyze_text_with_openai(headings_text)

   # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {selected_heading}\n{responses}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = bot.send_message(call.message.chat.id, result_text)
    user_messages[call.message.chat.id] = {
        "result_message": result_message.message_id
    }


    print(responses)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling(non_stop=True)
